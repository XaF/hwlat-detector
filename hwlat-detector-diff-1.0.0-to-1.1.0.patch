hwlat_detector: A system hardware latency detector

This patch allows the use of the hardware latency detector module
on 3.0.0 kernels. This module can be used to detect high hardware-induced
latencies within the system. It was originally written for use in
the RT kernel, but has wider applications.

Signed-off-by: Raphaël Beamonte <raphael.beamonte@gmail.com>

Index: xaf_quilt/Documentation/hwlat_detector.txt
===================================================================
--- xaf_quilt/drivers/misc/hwlat_detector.c
+++ xaf_quilt/drivers/misc/hwlat_detector.c
@@ -30,6 +30,7 @@
  *          requiring any kind of low-latency performance guarantee(s).
  *
  * Copyright (C) 2008-2009 Jon Masters, Red Hat, Inc. <jcm@redhat.com>
+ * 1.1.0 edited in 2011 by Raphaël Beamonte <raphael.beamonte@gmail.com>
  *
  * Includes useful feedback from Clark Williams <clark@redhat.com>
  *
@@ -49,12 +50,14 @@
 #include <linux/seq_file.h>
 #include <linux/uaccess.h>
 #include <linux/version.h>
+#include <linux/slab.h>
+#include <linux/delay.h>
 
 #define BUF_SIZE_DEFAULT	262144UL		/* 8K*(sizeof(entry)) */
 #define BUF_FLAGS		(RB_FL_OVERWRITE)	/* no block on full */
 #define U64STR_SIZE		22			/* 20 digits max */
 
-#define VERSION			"1.0.0"
+#define VERSION			"1.1.0"
 #define BANNER			"hwlat_detector: "
 #define DRVNAME			"hwlat_detector"
 #define DEFAULT_SAMPLE_WINDOW	1000000			/* 1s */
@@ -194,10 +197,11 @@
 	/* so we'll start with this cpu and try others if not */
 	/* Steven is planning to add a generic mechanism */
 	mutex_lock(&ring_buffer_mutex);
-	e = ring_buffer_consume(ring_buffer, smp_processor_id(), NULL);
+	preempt_disable();
+	e = ring_buffer_consume(ring_buffer, smp_processor_id(), NULL, NULL);
 	if (!e) {
 		for_each_online_cpu(cpu) {
-			e = ring_buffer_consume(ring_buffer, cpu, NULL);
+			e = ring_buffer_consume(ring_buffer, cpu, NULL, NULL);
 			if (e)
 				break;
 		}
@@ -208,6 +212,7 @@
 		memcpy(sample, s, sizeof(struct sample));
 	} else
 		sample = NULL;
+	preempt_enable();
 	mutex_unlock(&ring_buffer_mutex);
 
 	return sample;
